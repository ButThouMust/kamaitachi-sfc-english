Vocabulary:

Silhouette control code input
- A value (range 000 to 2F5) that is the input to a silhouette control code.
  It uniquely identifies a set of silhouette graphics. It is possible for one
  set of graphics to be shared between several frames of an animation.

Silhouette frame ID value
- A value (range 000 to 3AB) that represents one way to arrange one specific set
  of graphics on screen. There is a unique control code input for each frame ID.

--------------------------------------------------------------------------------

$4B8000: Given a silhouette ctrl code input, get a 24-bit pointer from here for
         data about how to construct the frames of silhouette graphics.
    The first 2 byte word in a group will have its MSB set.
    - Bit pos 0x8000: indicates start of group
    - Bit pos 0x4000: uses memory flag at 091A - if bit=1, leave flag alone
                      if bit=0, set the flag ON (see $02813E) - purpose=???
    - Bit pos 0x2000: indicates size of each sprite: 0 -> 16x16, 1 -> 32x32
    - The other 13 bits (10 in practice) store the input's base silh frame ID.

    Bit positions 0x4000 and 0x2000 also encode how to process the decompressed
    graphics data for the silhouettes. More details below in decompression code.

    Main routine for interpretting data here is at $02815B.
    - Value from 0000-1FFF: read OAM data. (028196)
      High byte: which frame to show, from base silhouette frame ID. (0281a4)
      * (One ctrl code input can have up to 0x20 unique frames of animation)
      Low byte:  how long to display the silhouette set, in frames? (0281d9)

    - Value from 2000-3FFF: read silhouette tile data. (0281ea)
      Easy, (value & 0x1FFF) is the base frame ID to use as an index to $4BB306
      (see below) to know which set of graphics to load.

    - Value from 6000-7FFF: change the color of the silhouette (028242)
      Simply put the color value you wish to use after the 6000 value.

      On the topic of color values, note that Kamaitachi sets up gfx layers to
      take the background image color and SUBTRACT the silhouette color to get
      the colors that the player ultimately sees on screen. The default color
      value for silhouettes is BGR15 04E7 (RGB24 393908), a dark green color.
      This mostly lets the blue component through, but reduces red/green comps.

    - Value from 4000-5FFF: unknown, not used in JP game (028214)
      In the original Japanese game, no two-byte values start with 5 (5xxx),
      and all the two-byte values that start with 4 (4xxx) are color values.

    See $0280C4, $028107, $028299
    Pointer list: $4B8000-$4B88E1
    Data range:   $4B88E2-$4B9CFD

$4B9CFE: Given a frame ID value, get a 24-bit pointer from here for compressed
         data that specifies a 16x16 grid of what 16x16 pixel regions should
         have silhouettes on them. In other words, data for OAM X/Y coordinates.
         Note: this format works the same for both 16x16 or 32x32 sprite sets.
         Pointer list: $4B9CFE-$4BA801; See ASM at $028719
         Data ranges:  $02A871-$02B938, $48D1A3-$48FFF0, $02B939-$02C31E

$4BA802: Given a frame ID value, get a 24-bit pointer to data related to OAM
         entry data, specifically tile ID numbers and sprite attributes.
         (See above: X/Y coordinates are multiples of 0x10 generated on the fly)
         Pointer range: $4BA802-$4BB305; See ASM at $0287D2
         Ranges for pointed data:
         $498000-$49FF89, $4A8000-$4AFFFF, $4BC92C-$4BFFD9, $5DC40F-$5DFFA8, $04DF87-$04EADE

$4BB306: Given a frame ID value, get the two-byte value of the silhouette ctrl
         code input (note: singular, not plural) that references it.
         Data range:    $4BB306-$4BBA5D

$4BBA5E: Given a silhouette ctrl code input, use it as an index here to get a
         24-bit pointer to the compressed silhouette graphics data.
         Pointer range: $4BBA5E-$4BC33F
         Data range:    $4C8000-$5DC40E

$4BC340: Given a silhouette ctrl code input, use it as an index here to get a
         2-byte value encoding the size of the silhouette gfx when transferring
         it around in WRAM after decompression. More details at the bottom of
         the section on decompression.
         Data range:    $4BC340-$4BCA97

--------------------------------------------------------------------------------

Summarize the ROM data blocks:

0x012871-0x013938: X/Y grid data block 1 (frames 000-0DB)
0x013939-0x01431E: X/Y grid data block 3 (frames 32E-3AB)
(Total: 0x1AAE)

0x025F87-0x026ADE: OAM data block 5 (frames 392-3AB)
(Total: 0xB58)

0x2451A3-0x247FF0: X/Y grid data block 2 (frames 0DC-32D)
[0x F bytes of FF]
0x248000-0x257FFF: OAM data block 1 (frames 000-12C)
[0x76 bytes of FF]
0x248000-0x257FFF: OAM data block 2 (frames 12D-26D)
[0x 6 bytes of FF]
0x258000-0x2588E1: Pointer table for silhouette construction
0x2588E2-0x259CFD: Silhouette construction data block
0x259CFE-0x25A801: Pointer table for X/Y grid data
0x25A802-0x25B305: Pointer table for OAM data
0x25B306-0x25BA5D: Lookup table for control code input value from silh frame ID
0x25BA5E-0x25C33F: Pointer table for graphics data
0x25C340-0x25C92B: Lookup table for "data size"
0x25C92C-0x25FFD9: OAM data block 3 (frames 26E-2FE)
[0x26 bytes of FF]
0x260000-0x2EC40E: Graphics data block
0x2EC40F-0x2EFFA8: OAM data block 4 (frames 2FF-391)
Total: 0x2EFFA8 - 0x2451a3 + 1 - 0xF - 0x26 - 0x76 - 0x6 = 0xAAD55

So all in all, this much data in the ROM is for the silhouettes:
0xAAD55 + 0x1AAE + 0xB58 = 0xAD35B = 709,467 bytes (692.84 KB)

Graphics data:   0x8C40F = 574,479 bytes, about 561.01 KB.
Everything else: 0x20F4C = 134,988 bytes, about 131.82 KB.
Graphics would be a good target if you want to try freeing up ROM space.

--------------------------------------------------------------------------------

The game has quite a few silhouette input values that end up unused in the final
game, in particular three unused animations. Creating and inserting modified
Japanese scripts to display these silhouettes made me discover an interesting
mistake on the part of Chunsoft. The animation for input 0x13A doesn't correctly
show all its frames, and I confirmed this by carefully cross referencing these
two particular sets of data:

- Control code input lookup table for silhouette frame IDs 0x183-0x187:
  Table entries for all five are control code input 0x13A
  Applicable data at 0x25B306 + 0x183*2 = 0x25B60C - 0x25B615
  
- Construction data for ctrl code input 0x13A at 0x259136 ($4B9136):
  C183 2183 0002 [terminated by start of next group, C188]

Notice how the construction data only allows for showing one frame!
In other words, not only is the animation unused, but even if you were to get it
to display in the game by injecting a text script to do so, it would only show
one frame of the animation. 

If you want to see all five frames, you would have to insert new construction
data somewhere and update the pointer accordingly. Steps would be:
- New constr. data would be: 83 C1 83 21 [LL 00 LL 01 LL 02 LL 03 LL 04 FF FF]
  The LL bytes are durations. The order for 00-04 bytes is up to you. The FF FF
  at the end terminates the list.
- Insert the new 0x10 bytes at any position in the ROM you like. $4BFFDA works.
- Update the pointer at $4B83AE from [36 91 4B] to the new pointer [DA FF 4B].

I don't know for sure what would be the intended order for the five frames (it
involves one character attacking another), but some guesses are:
- 187, 183, 186, 184, 185 (4, 0, 3, 1, 2)
- 187, 183, 185, 184, 186 (4, 0, 2, 1, 3)

The silhouettes' scale and position seem to fit with background image 1F.

--------------------------------------------------------------------------------

Short bit about animations: the game seems to copy in only as many sprites as
are necessary for each frame, on the fly as the animation plays.

Chunsoft did some palette trickery to use the SNES's limit of 0x200 sprites at
any given time as effectively as possible for the larger and/or more complicated
silhouettes.

--------------------------------------------------------------------------------

Relevant subroutines/code:

$028532, $028719
- Use frame ID to get pointers from $4BA802 and $4B9CFE.
- For pointer from $4B9CFE, read two bytes from it. This contains 16 bit flags
  for when and how many 2-byte words to read. For example, 0x2AAA has 7 bit
  flags at positions 2, 4, 6, 8, A, C, and E (position 0 is the MSB).
- For each bit position with a 1, read another two-byte word. Same format.
- For each bit position with a 1, run $0287A3 to write an OAM entry to buffer.

So in a way, it generates a grid of 16x16 flags that say "silhouette is here"
for a particular 16x16 pixel region on screen.

The first word describes what rows (Y positions) have them, while all the words
after that describe what columns (X positions) in each row have them.

Example: The word at $02AFF7 is 7FFC. All the rows but 0, E and F are "yes."
So then, there should be 0xD words after that to describe the columns:
F800 FF00 FF80 FF00 FC00 FC00 7C00 7C00 7E00 7E00 7F00 7F80 7F80 

          0123456789ABCDEF
         +----------------+
0 -      |                |
1 Y F800 |#####           |
2 Y FF00 |########        |
3 Y FF80 |#########       |
4 Y FF00 |########        |
5 Y FC00 |######          |
6 Y FC00 |######          |
7 Y 7C00 | #####          |
8 Y 7C00 | #####          |
9 Y 7E00 | ######         |
A Y 7E00 | ######         |
B Y 7F00 | #######        |
C Y 7F80 | ########       |
D Y 7F80 | ########       |
E -      |                |
F -      |                |
         +----------------+

$028572: Read a pointer for what silhouette graphics to load based on an input
         to a silhouette control code from the script.

$02863B: Start reading data from the above mentioned pointer.

--------------------------------------------------------------------------------

Silhouette graphics data decompression format

Short version: silhouette graphics are compressed with run-length encoding.

Given a pointer from the table at $4BBA5E, execute the loop at $02864A.
Keep reading bytes that encode both the compression case and a data size.

- If the byte is 00, end of data.
  Decompression will also end if 0x2000 bytes have been written to the buffer.
- If the byte is 40 (see $0286A2), this indicates to do LoROM bank wrapping for
  the graphics data pointer = increment bank number, set bank offset to 0x8000.

If the byte is not 00 or 40, check bits 6-7 and run a subroutine:
00xx xxxx: $028684 = run of consecutive 00
01xx xxxx: $028698 = run of consecutive FF
10xx xxxx: $0286D9 = read uncompressed data from ROM one byte at a time
11xx xxxx: $0286F9 = run of some consecutive byte (read from ROM)

----------

Following the logic for the assembly code:

$028684 (range 01-3F):
- Call $0286BE with data byte in direct page $00 being [00].
- Update size in memory, and RTS.

    $0286BE:
    - Get data byte value in direct page $00.
    - Repeat it in decompression buffer a total of (type byte & 0x3F) times, or
      until the 0x2000 byte buffer is completely filled.

$028698 (range 41-7F):
- (ASM checks here if byte is 40, but covered above for simplicity)
- Call $0286BE, with data byte in direct page $00 being [FF].

$0286D9 (range 80-BF):
- Read up to (type byte & 0x3F) + 1 bytes from the ROM directly into the buffer,
  or until it is completely filled.

$0286F9 (range C0-FF):
- Read one byte from the ROM, and repeat it up to (type byte & 0x3F) + 1 times
  in the buffer, or until it is completely filled.

So to summarize the format:
00:    end of data
01-3F: run of 00 bytes (size 01-3F)
40:    LoROM bank advance
41-7F: run of FF bytes (size 01-3F)
80-BF: literal data    (size 01-40)
C0-FF: run of NN bytes (size 01-40)

----------

Remarks about the graphics compression format:
- Runs of 00 or FF can be up to 0x3F bytes long, whereas runs of any other byte
  can be up to 0x40 bytes long.
- Unusually, across all the silhouettes in the game's data, there are NO groups
  of 0x40 bytes of literal data, nor runs of 0x40 bytes that are not 00 or FF.
  However, there would be plenty of 0x40 byte runs of 00 or FF.
- Chunsoft's silhouette RLE compressor seemingly didn't account for how if you
  have a single literal of 00 or FF, it is better to encode that as a run of 1,
  since the overhead byte implies the value. For example, instead of [80 00],
  use [01]. Similarly, [41] instead of [80 FF]. However, the optimization *does*
  pop up if this case occurs at the very end of the file???

Remarks about the format of the graphics data itself:
- The raw decompressed output is 2bpp graphics, but is not usable as-is for SNES
  graphics. The rows and bitplanes are grouped together like for the NES:
  raw output:  [r0p0 r1p0 r2p0 ... r7p0 ; r0p1 r1p1 r2p1 ... r7p1]
  SNES format: [r0p0 r0p1 ; r1p0 r1p1 ; r2p0 r2p1 ; ... r7p0 r7p1]
- Each file is either a multiple of 0x200 bytes (0x20 tiles, 0x10 16x16 sprites)
  or 0x400 bytes (0x40 tiles, 4 32x32 sprites). They are intrinsically padded to
  these sizes and can have quite a lot of unused space (00 bytes) in the last
  sprite row, depending on the remainder of sprites from the last multiple.
  For example, if a 32x32 sprite set only needs 3 sprites, one sprite's worth of
  tile data will be wasted as padding.

In the specific case of control code input 0x097 (Aki holding her camera and
asking Tooru for him to take a picture), it effectively has an entire sprite row
of tile data wasted on padding, because sprites 0 and 39-3F are all filled with
00. If you're really starving for more space in the ROM, you could try to edit
the OAM data (both X/Y and other) and cut out the padding.

--------------------------------------------------------------------------------

$0285C0: Once the tiles have all been decompressed, they need to be transferred
along with any other silhouettes that are currently on screen.

Take the two-byte value used for marking the silhouette's group and bitwise AND
it with 0x6000 (isolate positions 0x4000 and 0x2000). (ASM code at $0281F7)
[The game also takes note of what silhouette gfx data block to start writing to]

Take the multiple of 0x2000 (range 0-3). (Use ptr table at $0285CC)
- If it is 0, then copy the specified silhouette gfx data block (0x800 bytes)
  from $7F6000 to $7F4000, as well as every block after it. (ASM at $0285D4)
  For example, if the data block number is 1, it will copy blocks 1-3, which
  correspond to $7F6800-$7F7FFF.

- Otherwise, calculate the "decoded size value," as I'll call it, from $4BC340.
  Get the raw two byte value, double it, and restrict it to at most 0x400.
  (See $02858A) Let N be this restricted value, the "decoded size value."
  Copy 8N bytes directly from $7F6000 to $7F4000. (See $028613)

--------------------------------------------------------------------------------

Gold bookmark animation

$01F0C0 has a set of graphics data compressed in the same format as silhouettes.
It is decompressed as sprites when the player goes to the file select menu, and
is for an animation that you see if your bookmark is gold (it shines).

If you want to be able to view it in the game without necessarily fulfilling the
frankly ridiculous requirements to get it normally, change two bytes at 0x8167
in the ROM from [04 08] to [0C 0C]. You will see it on the top bookmark provided
the save data for it is not empty.

$01EABA has a table of 0xA pointers for OAM data for the animation frames.
Each block of OAM data is terminated by FFFF.
$01EAD8 $01EAE6 $01EB2C $01EBBE $01ECA8
$01ED66 $01EE4C $01EF3E $01EFF0 $01F086
